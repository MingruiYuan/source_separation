import torch
import numpy as np
#import np.fft as ft
import librosa.feature as lf
import librosa.core as lc
from scipy import interpolate

audio_len = 65280

mel_idx = np.array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
        12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
        25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,
        37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,
        50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,
        62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,
        75,  76,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,
        87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,  99,
        101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114,
        116, 117, 118, 119, 121, 122, 123, 125, 126, 127, 129, 130, 131,
        133, 134, 136, 137, 139, 140, 142, 143, 145, 146, 148, 149, 151,
        153, 154, 156, 158, 159, 161, 163, 164, 166, 168, 170, 172, 173,
        175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199,
        201, 204, 206, 208, 210, 213, 215, 217, 219, 222, 224, 227, 229,
        232, 234, 237, 239, 242, 244, 247, 250, 252, 255, 258, 260, 263,
        266, 269, 272, 275, 278, 281, 284, 287, 290, 293, 296, 299, 303,
        306, 309, 312, 316, 319, 323, 326, 330, 333, 337, 340, 344, 348,
        351, 355, 359, 363, 367, 371, 375, 379, 383, 387, 391, 395, 400,
        404, 408, 413, 417, 422, 426, 431, 435, 440, 445, 449, 454, 459,
        464, 469, 474, 479, 484, 490, 495, 500, 506], dtype='int16')

mel_dedup = np.array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12, 
	    13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
	    26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
        91,  92,  93,  94,  95,  96,  97,  98,  99, 101, 102, 103, 104,
        105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119,
        121, 122, 123, 125, 126, 127, 129, 130, 131, 133, 134, 136, 137,
        139, 140, 142, 143, 145, 146, 148, 149, 151, 153, 154, 156, 158,
        159, 161, 163, 164, 166, 168, 170, 172, 173, 175, 177, 179, 181,
        183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 204, 206, 208,
        210, 213, 215, 217, 219, 222, 224, 227, 229, 232, 234, 237, 239,
        242, 244, 247, 250, 252, 255, 258, 260, 263, 266, 269, 272, 275,
        278, 281, 284, 287, 290, 293, 296, 299, 303, 306, 309, 312, 316,
        319, 323, 326, 330, 333, 337, 340, 344, 348, 351, 355, 359, 363,
        367, 371, 375, 379, 383, 387, 391, 395, 400, 404, 408, 413, 417,
        422, 426, 431, 435, 440, 445, 449, 454, 459, 464, 469, 474, 479,
        484, 490, 495, 500, 506, 512], dtype='int16')

# compl = array([100, 109, 115, 120, 124, 128, 132, 135, 138, 141, 144, 147, 150,
#        152, 155, 157, 160, 162, 165, 167, 169, 171, 174, 176, 178, 180,
#        182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 203, 205,
#        207, 209, 211, 212, 214, 216, 218, 220, 221, 223, 225, 226, 228,
#        230, 231, 233, 235, 236, 238, 240, 241, 243, 245, 246, 248, 249,
#        251, 253, 254, 256, 257, 259, 261, 262, 264, 265, 267, 268, 270,
#        271, 273, 274, 276, 277, 279, 280, 282, 283, 285, 286, 288, 289,
#        291, 292, 294, 295, 297, 298, 300, 301, 302, 304, 305, 307, 308,
#        310, 311, 313, 314, 315, 317, 318, 320, 321, 322, 324, 325, 327,
#        328, 329, 331, 332, 334, 335, 336, 338, 339, 341, 342, 343, 345,
#        346, 347, 349, 350, 352, 353, 354, 356, 357, 358, 360, 361, 362,
#        364, 365, 366, 368, 369, 370, 372, 373, 374, 376, 377, 378, 380,
#        381, 382, 384, 385, 386, 388, 389, 390, 392, 393, 394, 396, 397,
#        398, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 414,
#        415, 416, 418, 419, 420, 421, 423, 424, 425, 427, 428, 429, 430,
#        432, 433, 434, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447,
#        448, 450, 451, 452, 453, 455, 456, 457, 458, 460, 461, 462, 463,
#        465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 480,
#        481, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 496,
#        497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511], dtype = 'int16')

all_idx = np.array(list(filter(lambda x:True if x % 1 == 0 else False, range(513)))).astype('int16')

def stft(raw):
	"""
	raw: input torch tensor, length: 256*255=65280
	mel_spec: tensor 256*256
	phase: numpy array 512*256
	"""

	D = lc.stft(y=raw, n_fft=1022, hop_length=256)
	magnitude = np.abs(D)
	phase = np.angle(D)
	mel_spec = np.zeros((256,256))
	mel_spec = torch.Tensor(magnitude[mel_idx])
	return mel_spec, phase

def istft(mel_spec, phase):
	"""
	mel_spec: numpy 256*256
	phase: numpy array 512*256
	audio_proc: numpy array 65280*1
	"""
	#mel_spec = mel_spec.numpy()
	yt = np.zeros((253,256))
	#print(np.shape(mel_dedup))
	counter = 0
	for i in range(len(mel_idx)):
		if i > 0:
			if mel_idx[i] == mel_idx[i-1]:
				#linear_spec[mel_idx[i]] = (mel_spec[i]+mel_spec[i-1])/2
				yt[counter-1] = (yt[counter-1] + mel_spec[i])/2 
			else:
				#linear_spec[mel_idx[i]] = mel_spec[i]
				yt[counter] = mel_spec[i]
				counter += 1
		else:
			#linear_spec[mel_idx[i]] = mel_spec[i]
			yt[counter] = mel_spec[i]
			counter += 1

	f = interpolate.interp1d(mel_dedup,yt,'cubic',axis=0)
	ynew = f(all_idx)
	ynew = ynew[:512]
	#print(ynew.shape)

	j = np.array([1j],dtype='complex')
	linear_spec = np.multiply(ynew, np.cos(phase)) + j*np.multiply(ynew, np.sin(phase))
	audio_proc = lc.istft(linear_spec, hop_length=256, win_length=1022)
	#print(audio_proc.shape)

	return audio_proc
